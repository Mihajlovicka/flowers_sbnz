package cep;
import  com.ftn.sbnz.model.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;


declare RecommandationPoints
    point: Number
    plant: Plant
end

declare SizePoints
    point: Number
    plant: Plant
end


declare HumidityChosen
    humidityMin:Double
    humidityMax:Double
end

declare AirCirculationChosen
    highCirculation:Boolean
end

function double calculatePoints(double plantHumidity, double humidityMin, double humidityMax) {
    double distance = 0;
    double maxDistance = humidityMax - humidityMin;
    double maxPoints = 100; // Adjust as needed
    double percentage;

    if (plantHumidity < humidityMin) {
        distance = humidityMin - plantHumidity;
    } else if (plantHumidity > humidityMax) {
        distance = plantHumidity - humidityMax;
    }

    percentage = (double) distance / maxDistance;
    double points = (double) Math.round((1 - percentage) * maxPoints);
    return points;
}



rule "Match Room Preferences humidity < 50"
when
    EnvironmentPreferences(room == EnvironmentPreferences.Room.Bedroom || room == EnvironmentPreferences.Room.LivingRoom ||
                            room == EnvironmentPreferences.Room.Office || room == EnvironmentPreferences.Room.Other)
then
    insert(new HumidityChosen(0.0,50.0));
end

rule "Match Room Preferences humidity 50-60"
when
    EnvironmentPreferences(room == EnvironmentPreferences.Room.Kitchen || room == EnvironmentPreferences.Room.Bathroom)
then
    insert(new HumidityChosen(51.0,60.0));
end

rule "Humidity Points 1"
when
    $plant: Plant($humidity:environment.getHumidity())
    HumidityChosen($humidityMin:humidityMin, $humidityMax:humidityMax)
then
    insert(new RecommandationPoints(calculatePoints($humidity, $humidityMin, $humidityMax), $plant));
end


rule "Match Room Position Door or window "
when
    EnvironmentPreferences(position == Position.ByDoor || position == Position.Window)
then
   insert(new AirCirculationChosen(true));
end

rule "Match Room Position not important"
when
    EnvironmentPreferences(position != Position.ByDoor && position != Position.Window)
then
   insert(new AirCirculationChosen(false));
end


rule "position points 2"
when
    $plant:Plant(environment.isAirCirculationSensitivity() == true)
    AirCirculationChosen(highCirculation == true)
then
   insert(new RecommandationPoints(-10, $plant));
end


rule "Flower Color Points"
when
    $plant: Plant($plantColors: description.getColor())
    LookPreferences($colors: color)
    $matchingColorCount: Number() from accumulate(
            $color: String() from $colors,
            count($plantColors.contains($color))
        )
then
    insert(new RecommandationPoints($matchingColorCount.intValue() * 10, $plant));
end

//
//rule "Flower Size Points 1"
//when
//    $plant: Plant($plantSizeMin: description.getAveragesSize().getWidthMin(),
//                    $plantSizeMax: description.getAveragesSize().getWidthMax())
//    LookPreferences($sizeMin: size.getWidthMin(),
//                    $sizeMax: size.getWidthMax())
//then
//    insert(new SizePoints(calculatePoints($sizeMin, $plantSizeMin, $plantSizeMax), $plant));
//end
//
//rule "Flower Size Points 2"
//when
//    $plant: Plant($plantSizeMin: description.getAveragesSize().getWidthMin(),
//                    $plantSizeMax: description.getAveragesSize().getWidthMax())
//    LookPreferences($sizeMin: size.getWidthMin(),
//                    $sizeMax: size.getWidthMax())
//then
//    insert(new SizePoints(calculatePoints($sizeMin, $plantSizeMin, $plantSizeMax), $plant));
//end
//
//
//rule "Flower Size Points 3"
//when
//    $plant: Plant($plantSizeMin: description.getAveragesSize().getHeightMin(),
//                    $plantSizeMax: description.getAveragesSize().getHeightMax())
//    LookPreferences($sizeMin: size.getHeightMin(),
//                    $sizeMax: size.getHeightMax())
//then
//    insert(new SizePoints(calculatePoints($sizeMax, $plantSizeMin, $plantSizeMax, $plant));
//end
//
//rule "Flower Size Points 4"
//when
//    $plant: Plant($plantSizeMin: description.getAveragesSize().getHeightMin(),
//                        $plantSizeMax: description.getAveragesSize().getHeightMax())
//    LookPreferences($sizeMin: size.getHeightMin(),
//                        $sizeMax: size.getHeightMax())
//then
//    insert(new SizePoints(calculatePoints($sizeMax, $plantSizeMin, $plantSizeMax, $plant));
//end

//rule "Flower Size Points"
//when
//    $plant: Plant()
//    $average: Number() from $point:accumulate(
//            SizePoints($points: points, plant == $plant),
//            average($points)
//        )
//then
//    insert(new SizePoints($average.intValue(), $plant));
//end

rule "Flower Season Points"
when
    $plant: Plant($plantSeason: description.getSeasons())
    LookPreferences($season: seasons)
    $matchingColorCount: Number() from accumulate(
            $seasons: String() from $season,
            count($plantSeason.contains($seasons))
        )
then
    insert(new RecommandationPoints($matchingColorCount.intValue() * 10, $plant));
end

rule "Plant Type Points"
when
    $plant: Plant($type: description.getPlantType())
    LookPreferences(plantType == $type)
then
    insert(new RecommandationPoints(10, $plant));
end


rule "Flower Points"
when
    $plant: Plant(description.flower.hasFlowers && description.flower.getFloweringSeason().size() > 0, $plantSeason:description.flower.getFloweringSeason())
    LookPreferences(flower.hasFlowers && flower.getFloweringSeason().size() > 0, $season:flower.getFloweringSeason())
    $matchingColorCount: Number() from accumulate(
                $seasons: String() from $season,
                count($plantSeason.contains($seasons))
            )
then
    insert(new RecommandationPoints(10 + 10*$matchingColorCount.intValue(), $plant));
end
