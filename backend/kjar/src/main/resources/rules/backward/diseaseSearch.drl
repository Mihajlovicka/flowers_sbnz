package backward;
import  com.ftn.sbnz.model.enums.*;
import  com.ftn.sbnz.model.plant.*;
import  com.ftn.sbnz.model.user.*;
import  com.ftn.sbnz.model.back2.*;
import  com.ftn.sbnz.model.drools.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

global HashMap<String, ArrayList<Disease>> symptomsPaths;

query isDiseaseOf( Disease x, Disease y )
    SubDisease( x, y; )
    or
    ( SubDisease( x, z; ) and isDiseaseOf( z, y; ) )
end

rule "Find possible diseases"
salience 20
when
    $m:BackwardGroupedDiseases($disease:disease)
    $symptom: String()
    DiseaseSymptom(symptom.getSymptom() == $symptom, $d: disease)
    isDiseaseOf($d,$disease;)
    $s:Symptom(symptom == $symptom)
then
    System.out.println( "sumptom: " + $symptom + " top bolest: " +$disease);
    ArrayList<Symptom> sym = $m.getSymptoms();
    sym.add($s);
    modify($m){setSymptoms(sym)}
    System.out.println($m);
end



rule "Find max"
salience 10
when
//    $symptomsPaths: HashMap(this != null) from symptomsPaths
    $maxSymptomCount: Number(intValue > 0) from accumulate(
        BackwardGroupedDiseases($symptoms: symptoms),
        max($symptoms.size())
    )
    $m: BackwardGroupedDiseases($symptoms: symptoms, $symptoms.size() == $maxSymptomCount)
then
   System.out.println("max: " + $maxSymptomCount);
   System.out.println("group: " + $m);
//   insert(new MaxD($m));
   modify($m){setMax(true)}
end

//query goToTop( Disease x, Disease z)
//    MaxD($top:max.getDisease())
//    SubDisease(x, $top; )
//    or
//    ( SubDisease( x, z; ) and goToTop( z, $top; ) )
//end



declare MaxD
    max:BackwardGroupedDiseases
end

query goToTop( Disease x,Disease z)
    (SubDisease(x, z; ) and MaxD(max.getDisease() == z))
    or
    ( SubDisease( x, z; ) and goToTop( x, y; ) )
end

query collectSubDiseases(Disease x, List subDiseases)
    SubDisease(x, subDisease; )
    or
    (SubDisease(x, z; ) and collectSubDiseases(z, subDiseases;))
end


rule "Find path"
salience 0
when
    MaxD($m:max, $top:max.getDisease(), $symptoms:max.getSymptoms())
    $symptomString: Symptom() from $symptoms
    DiseaseSymptom($symptomString.getSymptom() == symptom.getSymptom(), $d: disease)
//    goToTop($d, $z;)
then
//    System.out.println("symptom: " + $symptomString.getSymptom() + " z: " + $subDiseases );
//    modify($symptomsPaths){put($symptomString, 0)}
end



//rule "Find top disease"
//salience 10
//when
//    $maxSymptomCount: Number(intValue > 0) from accumulate(
//        BackwardGroupedDiseases($symptoms: symptoms),
//        max($symptoms.size())
//    )
//    BackwardGroupedDiseases($symptoms: symptoms, $symptoms.size() == $maxSymptomCount)
//    DiseaseSymptom($symptomString == symptom.getSymptom(), $d: disease)
//    $fittingSymptoms: List() from collect(
//        Symptom(symptom == $s) and
//        DiseaseSymptom(symptom.getSymptom() == $s)
//        from $symptoms
//    )
//then
//    System.out.println("Symptoms: " + $symptoms + " - Top Disease: " + $maxSymptomCount);
//end




//rule "Find top disease and count matching symptoms ne radi"
//salience 10
//when
//    $maxSymptomCount: Number(intValue > 0) from accumulate(
//        BackwardGroupedDiseases($symptoms: symptoms),
//        max($symptoms.size())
//    )
//    BackwardGroupedDiseases($symptoms: symptoms, $symptoms.size() == $maxSymptomCount, $topDisease: disease)
//    $testD:Disease(disease =="zutiranje lisca")
//    Symptom($symptom: symptom) from $symptoms
//    DiseaseSymptom($symptom == symptom.getSymptom(), $disease: disease , disease.getDisease() == "Infekcija patogenom (npr. gljivicom)")
//        countTestCases($disease, $testD, $symptoms, 3; $count: count)
////    countMatchingSymptomsRecursive($symptom, $topDisease, $maxSymptomCount, $symptoms, $count;)
//then
//    System.out.println("Symptoms: " + $symptoms + " - Top Disease: " + $testD);
////    System.out.println("Matching Symptoms: " + $count);
//end
//







//declare PossibleDisease
//    disease:String;
//    symptomCount:Integer;
//end
//
////
//query treatmentForSymptom(String treatment, String symptom)
//    Treatment(treatment, symptom;)
//end
//
//query causesForSymptom(String cause, String symptom)
//    Cause(cause, symptom;)
//end
//
//query diseasesForSymptom(String symptom, String disease)
//     Symptom(symptom, disease;)
//end
//
//query plantsForDiseases(String disease, String plant)
//    Disease(disease, plant;)
//end
//
//query symptomForPlants(String symptom, String plant, String $d)
//     diseasesForSymptom(symptom, $d;) and
//     plantsForDiseases($d, plant;)
//end
////
//rule "1 - Find possible diseases"
//salience 20
//when
//    $symptom: String()
//    $plant: PlantName()
//    symptomForPlants($symptom, $plant.getName(), $d;)
//then
//    System.out.println( "biljka: " + $plant.getName() + " bolest: " +$d + " simptom " +$symptom);
//    insert(new PossibleDisease($d,0));
//end
//
//rule "middle"
//salience 15
//when
//    $d1 : PossibleDisease()
//    $d2 : PossibleDisease(this != $d1, disease == $d1.disease)
//then
//    retract($d2)
//end
//
//rule "2 - Count symptoms for diseases"
//salience 10
//when
//    $disease: PossibleDisease()
//    $symptoms: List() from collect(String())
//    Number($num: intValue >= 0) from accumulate(
//        $s: Symptom(symptom memberOf $symptoms, disease == $disease.getDisease()),
//        count($s)
//    )
//then
//    modify($disease) {
//        setSymptomCount($num)
//    };
//    System.out.println("Possible disease: " + $disease + " sumptoms: " + $num);
//end
//
//rule "3 - Select disease with the most symptoms"
//salience 0
//when
//    $disease: PossibleDisease()
//    not PossibleDisease(symptomCount > $disease.getSymptomCount(), this != $disease)
//then
//    System.out.println("Selected disease: " + $disease.getDisease() + " symptoms counted: "  + $disease.getSymptomCount());
//end
//
//
//rule "4- symptom-cause"
//salience -10
//when
//    $disease: PossibleDisease()
//    not PossibleDisease(symptomCount > $disease.getSymptomCount(), this != $disease)
//    $symptomS: List() from collect(String())
//    $collectedSymptoms: List() from accumulate(
//        Symptom($s: symptom, disease == $disease.getDisease(), $s memberOf $symptomS),
//                collectList($s)
//    )
//    $symptom: String() from $collectedSymptoms
//    causesForSymptom(cause, $symptom;)
//then
//    System.out.println("Symptom: " + $symptom + " \ncause: "  + cause );
//end
//
//rule "4- symptom-treatment"
//salience -10
//when
//    $disease: PossibleDisease()
//    not PossibleDisease(symptomCount > $disease.getSymptomCount(), this != $disease)
//    $symptomS: List() from collect(String())
//    $collectedSymptoms: List() from accumulate(
//        Symptom($s: symptom, disease == $disease.getDisease(), $s memberOf $symptomS),
//                collectList($s)
//    )
//    $symptom: String() from $collectedSymptoms
//    treatmentForSymptom(treatment, $symptom;)
//then
//    System.out.println("Symptom: " + $symptom + " \ntreatmant: "  + treatment );
//end
